from fastapi import APIRouter, HTTPException, Depends
from ..models import User, Contract, Address
from auth_routers import pwd_context, decrypt_token
from ..db import get_db

router = APIRouter()


async def _get_user(token: str, db=Depends(get_db)):
    # Get the email using the token
    email = decrypt_token(token)

    # Query the database for the user by email
    user_data = await db.users.find_one(email)

    # Return user data
    return user_data


def find_address(address_list: list, address_id: str):
    for address in address_list:
        if address["address_id"] == address_id:
            return address


async def update_address(address_list: list, new_address: Address):
    address = await find_address(address_list, new_address["address_id"])
    address_list[address_list.index(address)] = new_address


# POST endpoint to create a new user
@router.post("/users/", response_model=User)
async def create_user(user: User):
    user.password = pwd_context.encrypt(user.password)

    # Get the database connection
    db = get_db()

    # Insert the user into the database
    new_user = await db.users.insert_one(user.model_dump())

    # Return the created user with an autogenerated ID
    return {**user.model_dump(), "_id": str(new_user.inserted_id)}


# GET endpoint to get user data
@router.get("/users/{token}", response_model=User)
async def get_user(token: str, db=Depends(get_db)):
    # Get the user using the token
    user_data = await _get_user(token, db)

    # If user not found, raise HTTPException with status code 401 (Token invalid)
    if not user_data:
        raise HTTPException(status_code=401, detail="Token invalid!")

    # Return the user data
    return user_data


# PUT endpoint to update user information
@router.put("/users/{token}", response_model=User)
async def update_contract(token: str, updated_fields: dict, db=Depends(get_db)):
    # Get the user using the token
    user_data = await get_user(token, db)

    # Hashes the password if password is updated
    if "password" in updated_fields:
        updated_fields["password"] = pwd_context.encrypt(updated_fields["password"])

    # Updates the data
    updated_user = await db.users.update_one(
        {"_id": user_data.inserted_id},
        {"$set": updated_fields}
    )

    # Returns updated user
    return updated_user


# DELETE endpoint to delete user
@router.delete("/users/{token}")
async def delete_contract(token: str, db=Depends(get_db)):
    # Get the user using the token
    user = await get_user(token, db)

    # Deletes the user
    deleted_user = db.users.delete_one({"_id": user.inserted_id})

    # Return if the user was deleted
    return deleted_user.deleted_count == 1


# PUT endpoint to update the contract of the user
@router.put("/users/{token}/contract", response_model=User)
async def update_contract(token: str, new_contract: Contract, db=Depends(get_db)):
    # Get the user using the token
    user_data = await get_user(token, db)

    # Updates the data
    updated_user = await db.users.update_one(
        {"_id": user_data.inserted_id},
        {"$set": {"contract": new_contract}}
    )

    # Returns updated user
    return updated_user


# DELETE endpoint to delete the current contract of the user
@router.delete("/users/{token}/contract", response_model=User)
async def delete_contract(token: str, db=Depends(get_db)):
    # Get the user using the token
    user_data = await get_user(token, db)

    # Updates the data
    updated_user = await db.users.update_one(
        {"_id": user_data.inserted_id},
        {"$set": {"contract": None}}
    )

    # Returns updated user
    return updated_user


# PUT endpoint to add a new address to the user
@router.put("/users/{token}/address", response_model=User)
async def add_address(token: str, address: Address, db=Depends(get_db)):
    # Get the user using the token
    user = await get_user(token, db)

    # Get the list of addresses and add the new address
    addresses: list = user["addresses"]
    addresses.append(address)

    # Updates the data
    updated_user = await db.users.update_one(
        {"_id": user.inserted_id},
        {"$set": {"addresses": addresses}}
    )

    # Returns updated user
    return updated_user


# PUT endpoint to update an address of the user
@router.put("/users/{token}/{address_id}", response_model=User)
async def update_address(token: str, updated_address: Address, db=Depends(get_db)):
    # Get the user using the token
    user = await get_user(token, db)

    # Get the list of addresses
    addresses: list = user["addresses"]

    # Updates the address
    updated_address = await update_address(addresses, updated_address)
    addresses[addresses.index(updated_address["address_id"])] = updated_address

    # Updates the data
    updated_user = await db.users.update_one(
        {"_id": user.inserted_id},
        {"$set": {"addresses": addresses}}
    )

    # Returns updated user
    return updated_user


# DELETE endpoint to delete an address of the user
@router.delete("/users/{token}/{address_id}", response_model=User)
async def delete_address(token: str, address_id: str, db=Depends(get_db)):
    # Get the user using the token
    user = await get_user(token, db)

    # Get the list of addresses
    addresses: list = user["addresses"]

    # Deletes the address
    updated_addresses = addresses.remove(find_address(addresses, address_id))

    # Updates the data
    updated_user = await db.users.update_one(
        {"_id": user.inserted_id}, {"$set": {"addresses": updated_addresses}}
    )

    # Returns updated user
    return updated_user




